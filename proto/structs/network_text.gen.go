// Code generated by gomacro; DO NOT EDIT.
package structs

import "github.com/tdakkota/cursor"

func (m NetworkTextMode) Append(cur *cursor.Cursor) (err error) {
	{
		err := cur.WriteUint8(uint8(m))
		if err != nil {
			return err
		}
	}
	return nil
}
func (m *NetworkTextMode) Scan(cur *cursor.Cursor) (err error) {
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		*m = NetworkTextMode(tmp)
	}
	return nil
}
func (m NetworkText) Append(cur *cursor.Cursor) (err error) {
	{
		err := m.Mode.Append(cur)
		if err != nil {
			return err
		}
	}
	{
		_, err := cur.WriteString(m.Text)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteUint8(uint8(len(m.SubstitutionList)))
		if err != nil {
			return err
		}
		for _, v := range m.SubstitutionList {
			{
				err := v.Append(cur)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}
func (m *NetworkText) Scan(cur *cursor.Cursor) (err error) {
	{
		err := m.Mode.Scan(cur)
		if err != nil {
			return err
		}
	}
	{
		tmp, err := cur.ReadString()
		if err != nil {
			return err
		}
		m.Text = tmp
	}
	{
		n, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		m.SubstitutionList = make([]NetworkText, n)
		for i := 0; i < int(n); i++ {
			{
				err := m.SubstitutionList[i].Scan(cur)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}
