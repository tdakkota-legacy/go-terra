// Code generated by gomacro; DO NOT EDIT.
package structs

import "github.com/tdakkota/cursor"

func (m DeathReason) Append(cur *cursor.Cursor) (err error) {
	{
		err := cur.WriteUint8(uint8(m))
		if err != nil {
			return err
		}
	}
	return nil
}
func (m *DeathReason) Scan(cur *cursor.Cursor) (err error) {
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		*m = DeathReason(tmp)
	}
	return nil
}
func (m DeathType) Append(cur *cursor.Cursor) (err error) {
	{
		err := cur.WriteUint8(uint8(m))
		if err != nil {
			return err
		}
	}
	return nil
}
func (m *DeathType) Scan(cur *cursor.Cursor) (err error) {
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		*m = DeathType(tmp)
	}
	return nil
}
func (m PlayerDeathReason) Append(cur *cursor.Cursor) (err error) {
	{
		err := m.PlayerDeathReason.Append(cur)
		if err != nil {
			return err
		}
	}
	if m.PlayerDeathReason&
		KilledViaPvP != 0 {
		{
			err := cur.WriteInt16(m.KillersPlayerID)
			if err != nil {
				return err
			}
		}
	}
	if m.PlayerDeathReason&
		KilledViaNPC != 0 {
		{
			err := cur.WriteInt16(m.KillingNPCsIndex)
			if err != nil {
				return err
			}
		}
	}
	if m.PlayerDeathReason&
		KilledViaProjectile !=
		0 {
		{
			err := cur.WriteInt16(m.ProjectileIndex)
			if err != nil {
				return err
			}
		}
	}
	if m.PlayerDeathReason&
		KilledViaOther !=
		0 {
		{
			err := m.TypeOfDeath.Append(cur)
			if err != nil {
				return err
			}
		}
	}
	if m.PlayerDeathReason&
		KilledViaProjectile2 !=
		0 {
		{
			err := cur.WriteInt16(m.ProjectileType)
			if err != nil {
				return err
			}
		}
	}
	if m.PlayerDeathReason&
		KilledViaPvP2 != 0 {
		{
			err := cur.WriteInt16(m.ItemType)
			if err != nil {
				return err
			}
		}
	}
	if m.PlayerDeathReason&
		KilledViaPvP3 != 0 {
		{
			err := cur.WriteUint8(m.ItemPrefix)
			if err != nil {
				return err
			}
		}
	}
	if m.PlayerDeathReason&
		KilledViaCustomModification !=
		0 {
		{
			_, err := cur.WriteString(m.DeathReason)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (m *PlayerDeathReason) Scan(cur *cursor.Cursor) (err error) {
	{
		err := m.PlayerDeathReason.Scan(cur)
		if err != nil {
			return err
		}
	}
	if m.PlayerDeathReason&
		KilledViaPvP != 0 {
		{
			tmp, err := cur.ReadInt16()
			if err != nil {
				return err
			}
			m.KillersPlayerID = tmp
		}
	}
	if m.PlayerDeathReason&
		KilledViaNPC != 0 {
		{
			tmp, err := cur.ReadInt16()
			if err != nil {
				return err
			}
			m.KillingNPCsIndex = tmp
		}
	}
	if m.PlayerDeathReason&
		KilledViaProjectile !=
		0 {
		{
			tmp, err := cur.ReadInt16()
			if err != nil {
				return err
			}
			m.ProjectileIndex = tmp
		}
	}
	if m.PlayerDeathReason&
		KilledViaOther !=
		0 {
		{
			err := m.TypeOfDeath.Scan(cur)
			if err != nil {
				return err
			}
		}
	}
	if m.PlayerDeathReason&
		KilledViaProjectile2 !=
		0 {
		{
			tmp, err := cur.ReadInt16()
			if err != nil {
				return err
			}
			m.ProjectileType = tmp
		}
	}
	if m.PlayerDeathReason&
		KilledViaPvP2 != 0 {
		{
			tmp, err := cur.ReadInt16()
			if err != nil {
				return err
			}
			m.ItemType = tmp
		}
	}
	if m.PlayerDeathReason&
		KilledViaPvP3 != 0 {
		{
			tmp, err := cur.ReadUint8()
			if err != nil {
				return err
			}
			m.ItemPrefix = tmp
		}
	}
	if m.PlayerDeathReason&
		KilledViaCustomModification !=
		0 {
		{
			tmp, err := cur.ReadString()
			if err != nil {
				return err
			}
			m.DeathReason = tmp
		}
	}
	return nil
}
