// Code generated by gomacro; DO NOT EDIT.
package messages

import "github.com/tdakkota/cursor"

func (m TweakItem) Append(cur *cursor.Cursor) (err error) {
	{
		err := cur.WriteInt16(m.ItemIndex)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteUint8(uint8(m.Flags1))
		if err != nil {
			return err
		}
	}
	if m.Flags1&TweakItemFlags1Color !=
		0 {
		{
			err := cur.WriteUint32(m.PackedColorValue)
			if err != nil {
				return err
			}
		}
	}
	if m.Flags1&TweakItemFlags1Damage !=
		0 {
		{
			err := cur.WriteUint16(m.Damage)
			if err != nil {
				return err
			}
		}
	}
	if m.Flags1&TweakItemFlags1Knockback !=
		0 {
		{
			err := cur.WriteFloat32(m.Knockback)
			if err != nil {
				return err
			}
		}
	}
	if m.Flags1&TweakItemFlags1UseAnimation !=
		0 {
		{
			err := cur.WriteUint16(m.UseAnimation)
			if err != nil {
				return err
			}
		}
	}
	if m.Flags1&TweakItemFlags1UseTime !=
		0 {
		{
			err := cur.WriteUint16(m.UseTime)
			if err != nil {
				return err
			}
		}
	}
	if m.Flags1&TweakItemFlags1Shoot !=
		0 {
		{
			err := cur.WriteInt16(m.Shoot)
			if err != nil {
				return err
			}
		}
	}
	if m.Flags1&TweakItemFlags1ShootSpeed !=
		0 {
		{
			err := cur.WriteFloat32(m.ShootSpeed)
			if err != nil {
				return err
			}
		}
	}
	if m.Flags1&TweakItemFlags1NextFlags !=
		0 {
		{
			err := cur.WriteUint8(uint8(m.Flags2))
			if err != nil {
				return err
			}
		}
	}
	if m.Flags2&TweakItemFlags2Width !=
		0 {
		{
			err := cur.WriteInt16(m.Width)
			if err != nil {
				return err
			}
		}
	}
	if m.Flags2&TweakItemFlags2Height !=
		0 {
		{
			err := cur.WriteInt16(m.Height)
			if err != nil {
				return err
			}
		}
	}
	if m.Flags2&TweakItemFlags2Scale !=
		0 {
		{
			err := cur.WriteFloat32(m.Scale)
			if err != nil {
				return err
			}
		}
	}
	if m.Flags2&TweakItemFlags2Ammo !=
		0 {
		{
			err := cur.WriteInt16(m.Ammo)
			if err != nil {
				return err
			}
		}
	}
	if m.Flags2&TweakItemFlags2UseAmmo !=
		0 {
		{
			err := cur.WriteInt16(m.UseAmmo)
			if err != nil {
				return err
			}
		}
	}
	if m.Flags2&TweakItemFlags2NotAmmo !=
		0 {
		{
			err := cur.WriteBool(m.NotAmmo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (m *TweakItem) Scan(cur *cursor.Cursor) (err error) {
	{
		tmp, err := cur.ReadInt16()
		if err != nil {
			return err
		}
		m.ItemIndex = tmp
	}
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		m.Flags1 = TweakItemFlags1(tmp)
	}
	if m.Flags1&TweakItemFlags1Color !=
		0 {
		{
			tmp, err := cur.ReadUint32()
			if err != nil {
				return err
			}
			m.PackedColorValue = tmp
		}
	}
	if m.Flags1&TweakItemFlags1Damage !=
		0 {
		{
			tmp, err := cur.ReadUint16()
			if err != nil {
				return err
			}
			m.Damage = tmp
		}
	}
	if m.Flags1&TweakItemFlags1Knockback !=
		0 {
		{
			tmp, err := cur.ReadFloat32()
			if err != nil {
				return err
			}
			m.Knockback = tmp
		}
	}
	if m.Flags1&TweakItemFlags1UseAnimation !=
		0 {
		{
			tmp, err := cur.ReadUint16()
			if err != nil {
				return err
			}
			m.UseAnimation = tmp
		}
	}
	if m.Flags1&TweakItemFlags1UseTime !=
		0 {
		{
			tmp, err := cur.ReadUint16()
			if err != nil {
				return err
			}
			m.UseTime = tmp
		}
	}
	if m.Flags1&TweakItemFlags1Shoot !=
		0 {
		{
			tmp, err := cur.ReadInt16()
			if err != nil {
				return err
			}
			m.Shoot = tmp
		}
	}
	if m.Flags1&TweakItemFlags1ShootSpeed !=
		0 {
		{
			tmp, err := cur.ReadFloat32()
			if err != nil {
				return err
			}
			m.ShootSpeed = tmp
		}
	}
	if m.Flags1&TweakItemFlags1NextFlags !=
		0 {
		{
			tmp, err := cur.ReadUint8()
			if err != nil {
				return err
			}
			m.Flags2 = TweakItemFlags2(tmp)
		}
	}
	if m.Flags2&TweakItemFlags2Width !=
		0 {
		{
			tmp, err := cur.ReadInt16()
			if err != nil {
				return err
			}
			m.Width = tmp
		}
	}
	if m.Flags2&TweakItemFlags2Height !=
		0 {
		{
			tmp, err := cur.ReadInt16()
			if err != nil {
				return err
			}
			m.Height = tmp
		}
	}
	if m.Flags2&TweakItemFlags2Scale !=
		0 {
		{
			tmp, err := cur.ReadFloat32()
			if err != nil {
				return err
			}
			m.Scale = tmp
		}
	}
	if m.Flags2&TweakItemFlags2Ammo !=
		0 {
		{
			tmp, err := cur.ReadInt16()
			if err != nil {
				return err
			}
			m.Ammo = tmp
		}
	}
	if m.Flags2&TweakItemFlags2UseAmmo !=
		0 {
		{
			tmp, err := cur.ReadInt16()
			if err != nil {
				return err
			}
			m.UseAmmo = tmp
		}
	}
	if m.Flags2&TweakItemFlags2NotAmmo !=
		0 {
		{
			tmp, err := cur.ReadBool()
			if err != nil {
				return err
			}
			m.NotAmmo = tmp
		}
	}
	return nil
}
