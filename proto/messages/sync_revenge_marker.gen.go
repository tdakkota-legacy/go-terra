// Code generated by gomacro; DO NOT EDIT.
package messages

import "github.com/tdakkota/cursor"

func (m SyncRevengeMarker) Append(cur *cursor.Cursor) (err error) {
	{
		err := cur.WriteInt32(m.UniqueID)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteFloat32(m.X)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteFloat32(m.Y)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteInt32(m.NPCID)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteFloat32(m.NPCHPPercent)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteInt32(m.NPCType)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteInt32(m.NPCAI)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteInt32(m.CoinValue)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteFloat32(m.BaseValue)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteBool(m.SpawnedFromStatue)
		if err != nil {
			return err
		}
	}
	return nil
}
func (m *SyncRevengeMarker) Scan(cur *cursor.Cursor) (err error) {
	{
		tmp, err := cur.ReadInt32()
		if err != nil {
			return err
		}
		m.UniqueID = tmp
	}
	{
		tmp, err := cur.ReadFloat32()
		if err != nil {
			return err
		}
		m.X = tmp
	}
	{
		tmp, err := cur.ReadFloat32()
		if err != nil {
			return err
		}
		m.Y = tmp
	}
	{
		tmp, err := cur.ReadInt32()
		if err != nil {
			return err
		}
		m.NPCID = tmp
	}
	{
		tmp, err := cur.ReadFloat32()
		if err != nil {
			return err
		}
		m.NPCHPPercent = tmp
	}
	{
		tmp, err := cur.ReadInt32()
		if err != nil {
			return err
		}
		m.NPCType = tmp
	}
	{
		tmp, err := cur.ReadInt32()
		if err != nil {
			return err
		}
		m.NPCAI = tmp
	}
	{
		tmp, err := cur.ReadInt32()
		if err != nil {
			return err
		}
		m.CoinValue = tmp
	}
	{
		tmp, err := cur.ReadFloat32()
		if err != nil {
			return err
		}
		m.BaseValue = tmp
	}
	{
		tmp, err := cur.ReadBool()
		if err != nil {
			return err
		}
		m.SpawnedFromStatue = tmp
	}
	return nil
}
