// Code generated by gomacro; DO NOT EDIT.
package messages

import "github.com/tdakkota/cursor"

func (m SyncEmoteBubble) Append(cur *cursor.Cursor) (err error) {
	{
		err := cur.WriteInt32(m.EmoteID)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteUint8(m.AnchorType)
		if err != nil {
			return err
		}
	}
	if m.AnchorType !=
		255 {
		{
			err := cur.WriteUint16(m.PlayerID)
			if err != nil {
				return err
			}
		}
	}
	if m.AnchorType !=
		255 {
		{
			err := cur.WriteUint16(m.EmoteLifeTime)
			if err != nil {
				return err
			}
		}
	}
	if m.AnchorType !=
		255 {
		{
			err := cur.WriteUint8(m.Emote)
			if err != nil {
				return err
			}
		}
	}
	if m.AnchorType !=
		255 && m.Emote < 0 {
		{
			err := cur.WriteInt16(m.EmoteMetaData)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (m *SyncEmoteBubble) Scan(cur *cursor.Cursor) (err error) {
	{
		tmp, err := cur.ReadInt32()
		if err != nil {
			return err
		}
		m.EmoteID = tmp
	}
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		m.AnchorType = tmp
	}
	if m.AnchorType !=
		255 {
		{
			tmp, err := cur.ReadUint16()
			if err != nil {
				return err
			}
			m.PlayerID = tmp
		}
	}
	if m.AnchorType !=
		255 {
		{
			tmp, err := cur.ReadUint16()
			if err != nil {
				return err
			}
			m.EmoteLifeTime = tmp
		}
	}
	if m.AnchorType !=
		255 {
		{
			tmp, err := cur.ReadUint8()
			if err != nil {
				return err
			}
			m.Emote = tmp
		}
	}
	if m.AnchorType !=
		255 && m.Emote < 0 {
		{
			tmp, err := cur.ReadInt16()
			if err != nil {
				return err
			}
			m.EmoteMetaData = tmp
		}
	}
	return nil
}
