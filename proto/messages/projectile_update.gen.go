// Code generated by gomacro; DO NOT EDIT.
package messages

import "github.com/tdakkota/cursor"

func (m ProjectileUpdate) Append(cur *cursor.Cursor) (err error) {
	{
		err := cur.WriteInt16(m.ProjectileID)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteFloat32(m.PositionX)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteFloat32(m.PositionY)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteFloat32(m.VelocityX)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteFloat32(m.VelocityY)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteUint8(m.Owner)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteInt16(m.Type)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteUint8(m.ProjFlags)
		if err != nil {
			return err
		}
	}
	if m.ProjFlags&

		ProjectileUpdateProjFlagsAI0 !=
		0 {
		{
			err := cur.WriteFloat32(m.AI0)
			if err != nil {
				return err
			}
		}
	}
	if m.ProjFlags&

		ProjectileUpdateProjFlagsAI1 !=
		0 {
		{
			err := cur.WriteFloat32(m.AI1)
			if err != nil {
				return err
			}
		}
	}
	if m.ProjFlags&

		ProjectileUpdateProjFlagsDamage !=
		0 {
		{
			err := cur.WriteInt16(m.Damage)
			if err != nil {
				return err
			}
		}
	}
	if m.ProjFlags&

		ProjectileUpdateProjFlagsKnockback !=
		0 {
		{
			err := cur.WriteFloat32(m.Knockback)
			if err != nil {
				return err
			}
		}
	}
	if m.ProjFlags&

		ProjectileUpdateProjFlagsOriginalDamage !=
		0 {
		{
			err := cur.WriteInt16(m.OriginalDamage)
			if err != nil {
				return err
			}
		}
	}
	if m.ProjFlags&

		ProjectileUpdateProjFlagsProjUUID !=
		0 {
		{
			err := cur.WriteInt16(m.ProjUUID)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (m *ProjectileUpdate) Scan(cur *cursor.Cursor) (err error) {
	{
		tmp, err := cur.ReadInt16()
		if err != nil {
			return err
		}
		m.ProjectileID = tmp
	}
	{
		tmp, err := cur.ReadFloat32()
		if err != nil {
			return err
		}
		m.PositionX = tmp
	}
	{
		tmp, err := cur.ReadFloat32()
		if err != nil {
			return err
		}
		m.PositionY = tmp
	}
	{
		tmp, err := cur.ReadFloat32()
		if err != nil {
			return err
		}
		m.VelocityX = tmp
	}
	{
		tmp, err := cur.ReadFloat32()
		if err != nil {
			return err
		}
		m.VelocityY = tmp
	}
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		m.Owner = tmp
	}
	{
		tmp, err := cur.ReadInt16()
		if err != nil {
			return err
		}
		m.Type = tmp
	}
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		m.ProjFlags = tmp
	}
	if m.ProjFlags&

		ProjectileUpdateProjFlagsAI0 !=
		0 {
		{
			tmp, err := cur.ReadFloat32()
			if err != nil {
				return err
			}
			m.AI0 = tmp
		}
	}
	if m.ProjFlags&

		ProjectileUpdateProjFlagsAI1 !=
		0 {
		{
			tmp, err := cur.ReadFloat32()
			if err != nil {
				return err
			}
			m.AI1 = tmp
		}
	}
	if m.ProjFlags&

		ProjectileUpdateProjFlagsDamage !=
		0 {
		{
			tmp, err := cur.ReadInt16()
			if err != nil {
				return err
			}
			m.Damage = tmp
		}
	}
	if m.ProjFlags&

		ProjectileUpdateProjFlagsKnockback !=
		0 {
		{
			tmp, err := cur.ReadFloat32()
			if err != nil {
				return err
			}
			m.Knockback = tmp
		}
	}
	if m.ProjFlags&

		ProjectileUpdateProjFlagsOriginalDamage !=
		0 {
		{
			tmp, err := cur.ReadInt16()
			if err != nil {
				return err
			}
			m.OriginalDamage = tmp
		}
	}
	if m.ProjFlags&

		ProjectileUpdateProjFlagsProjUUID !=
		0 {
		{
			tmp, err := cur.ReadInt16()
			if err != nil {
				return err
			}
			m.ProjUUID = tmp
		}
	}
	return nil
}
