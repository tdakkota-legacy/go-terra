// Code generated by gomacro; DO NOT EDIT.
package messages

import "github.com/tdakkota/cursor"

func (m UpdatePlayer) Append(cur *cursor.Cursor) (err error) {
	{
		err := cur.WriteUint8(m.PlayerID)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteUint8(uint8(m.Control))
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteUint8(uint8(m.Pulley))
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteUint8(uint8(m.Misc))
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteUint8(uint8(m.SleepingInfo))
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteUint8(m.SelectedItem)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteFloat32(m.PositionX)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteFloat32(m.PositionY)
		if err != nil {
			return err
		}
	}
	if m.Pulley&UpdatePlayerPulleyUpdateVelocity !=
		0 {
		{
			err := cur.WriteFloat32(m.VelocityX)
			if err != nil {
				return err
			}
		}
	}
	if m.Pulley&UpdatePlayerPulleyUpdateVelocity !=
		0 {
		{
			err := cur.WriteFloat32(m.VelocityY)
			if err != nil {
				return err
			}
		}
	}
	if m.Misc&UpdatePlayerMiscUsedPotionofReturn !=
		0 {
		{
			err := cur.WriteFloat32(m.OriginalPositionX)
			if err != nil {
				return err
			}
		}
	}
	if m.Misc&UpdatePlayerMiscUsedPotionofReturn !=
		0 {
		{
			err := cur.WriteFloat32(m.OriginalPositionY)
			if err != nil {
				return err
			}
		}
	}
	if m.Misc&UpdatePlayerMiscUsedPotionofReturn !=
		0 {
		{
			err := cur.WriteFloat32(m.HomePositionX)
			if err != nil {
				return err
			}
		}
	}
	if m.Misc&UpdatePlayerMiscUsedPotionofReturn !=
		0 {
		{
			err := cur.WriteFloat32(m.HomePositionY)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (m *UpdatePlayer) Scan(cur *cursor.Cursor) (err error) {
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		m.PlayerID = tmp
	}
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		m.Control = UpdatePlayerControl(tmp)
	}
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		m.Pulley = UpdatePlayerPulley(tmp)
	}
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		m.Misc = UpdatePlayerMisc(tmp)
	}
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		m.SleepingInfo = UpdatePlayerSleepingInfo(tmp)
	}
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		m.SelectedItem = tmp
	}
	{
		tmp, err := cur.ReadFloat32()
		if err != nil {
			return err
		}
		m.PositionX = tmp
	}
	{
		tmp, err := cur.ReadFloat32()
		if err != nil {
			return err
		}
		m.PositionY = tmp
	}
	if m.Pulley&UpdatePlayerPulleyUpdateVelocity !=
		0 {
		{
			tmp, err := cur.ReadFloat32()
			if err != nil {
				return err
			}
			m.VelocityX = tmp
		}
	}
	if m.Pulley&UpdatePlayerPulleyUpdateVelocity !=
		0 {
		{
			tmp, err := cur.ReadFloat32()
			if err != nil {
				return err
			}
			m.VelocityY = tmp
		}
	}
	if m.Misc&UpdatePlayerMiscUsedPotionofReturn !=
		0 {
		{
			tmp, err := cur.ReadFloat32()
			if err != nil {
				return err
			}
			m.OriginalPositionX = tmp
		}
	}
	if m.Misc&UpdatePlayerMiscUsedPotionofReturn !=
		0 {
		{
			tmp, err := cur.ReadFloat32()
			if err != nil {
				return err
			}
			m.OriginalPositionY = tmp
		}
	}
	if m.Misc&UpdatePlayerMiscUsedPotionofReturn !=
		0 {
		{
			tmp, err := cur.ReadFloat32()
			if err != nil {
				return err
			}
			m.HomePositionX = tmp
		}
	}
	if m.Misc&UpdatePlayerMiscUsedPotionofReturn !=
		0 {
		{
			tmp, err := cur.ReadFloat32()
			if err != nil {
				return err
			}
			m.HomePositionY = tmp
		}
	}
	return nil
}
