// Code generated by gomacro; DO NOT EDIT.
package messages

import "github.com/tdakkota/cursor"

func (m UpdateItemDrop2) Append(cur *cursor.Cursor) (err error) {
	{
		err := cur.WriteInt16(m.ItemID)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteFloat32(m.PositionX)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteFloat32(m.PositionY)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteFloat32(m.VelocityX)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteFloat32(m.VelocityY)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteInt16(m.StackSize)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteUint8(m.Prefix)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteUint8(m.NoDelay)
		if err != nil {
			return err
		}
	}
	{
		err := cur.WriteInt16(m.ItemNetID)
		if err != nil {
			return err
		}
	}
	return nil
}
func (m *UpdateItemDrop2) Scan(cur *cursor.Cursor) (err error) {
	{
		tmp, err := cur.ReadInt16()
		if err != nil {
			return err
		}
		m.ItemID = tmp
	}
	{
		tmp, err := cur.ReadFloat32()
		if err != nil {
			return err
		}
		m.PositionX = tmp
	}
	{
		tmp, err := cur.ReadFloat32()
		if err != nil {
			return err
		}
		m.PositionY = tmp
	}
	{
		tmp, err := cur.ReadFloat32()
		if err != nil {
			return err
		}
		m.VelocityX = tmp
	}
	{
		tmp, err := cur.ReadFloat32()
		if err != nil {
			return err
		}
		m.VelocityY = tmp
	}
	{
		tmp, err := cur.ReadInt16()
		if err != nil {
			return err
		}
		m.StackSize = tmp
	}
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		m.Prefix = tmp
	}
	{
		tmp, err := cur.ReadUint8()
		if err != nil {
			return err
		}
		m.NoDelay = tmp
	}
	{
		tmp, err := cur.ReadInt16()
		if err != nil {
			return err
		}
		m.ItemNetID = tmp
	}
	return nil
}
